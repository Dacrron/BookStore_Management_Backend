// <auto-generated />
using System;
using Bookietry.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bookietry.Migrations
{
    [DbContext(typeof(BookieDbContext))]
    partial class BookieDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bookietry.Models.Book", b =>
                {
                    b.Property<int>("Book_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Book_categ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Book_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lang")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Book_Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Bookietry.Models.BooksSeller", b =>
                {
                    b.Property<int>("Seller_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Seller_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seller_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seller_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seller_email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Seller_id");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("Bookietry.Models.Inventory", b =>
                {
                    b.Property<int>("Book_Id")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("Book_Id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Bookietry.Models.Invoice", b =>
                {
                    b.Property<int>("invoice_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Book_Id")
                        .HasColumnType("int");

                    b.Property<string>("invoice_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("invoice_mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("invoice_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("invoice_phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("userID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("invoice_id");

                    b.HasIndex("Book_Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Bookietry.Models.Purchase", b =>
                {
                    b.Property<int>("purchase_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Book_Id")
                        .HasColumnType("int");

                    b.Property<string>("Book_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Seller_id")
                        .HasColumnType("int");

                    b.Property<int>("purchase_cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("purchase_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("purchase_quantity")
                        .HasColumnType("int");

                    b.HasKey("purchase_id");

                    b.HasIndex("Book_Id");

                    b.HasIndex("Seller_id");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Bookietry.Models.Inventory", b =>
                {
                    b.HasOne("Bookietry.Models.Book", "forkey4")
                        .WithMany()
                        .HasForeignKey("Book_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("forkey4");
                });

            modelBuilder.Entity("Bookietry.Models.Invoice", b =>
                {
                    b.HasOne("Bookietry.Models.Book", "forkey3")
                        .WithMany()
                        .HasForeignKey("Book_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("forkey3");
                });

            modelBuilder.Entity("Bookietry.Models.Purchase", b =>
                {
                    b.HasOne("Bookietry.Models.Book", "forkey2")
                        .WithMany()
                        .HasForeignKey("Book_Id");

                    b.HasOne("Bookietry.Models.BooksSeller", "forkey1")
                        .WithMany()
                        .HasForeignKey("Seller_id");

                    b.Navigation("forkey1");

                    b.Navigation("forkey2");
                });
#pragma warning restore 612, 618
        }
    }
}
